{
  "name": {
    "ko": "FinHealthBot",
    "en": "FinHealthBot",
    "ja": "FinHealthBot"
  },
  "summary": {
    "ko": "일상 대화부터 금융·헬스케어 상담까지 제공하는 멀티 역할 AI 어시스턴트",
    "en": "A multi-role AI assistant that provides everything from casual chat to finance and healthcare consultations.",
    "ja": "日常会話から金融・ヘルスケア相談まで提供するマルチロールAIアシスタント。"
  },
  "role": {
    "ko": "Full-Cycle Developer",
    "en": "Full-Cycle Developer",
    "ja": "Full-Cycle Developer"
  },
  "tags": {
    "ko": ["LangGraph", "Qdrant", "RAG"],
    "en": ["LangGraph", "Qdrant", "RAG"],
    "ja": ["LangGraph", "Qdrant", "RAG"]
  },
  "platform": {
    "ko": "Web (Streamlit)",
    "en": "Web (Streamlit)",
    "ja": "Web（Streamlit）"
  },
  "workPeriod": {
    "ko": "2025.03 - 2025.04",
    "en": "2025.03 - 2025.04",
    "ja": "2025.03 - 2025.04"
  },
  "releaseDate": {
    "ko": "2025.04",
    "en": "2025.04",
    "ja": "2025.04"
  },
  "teamSize": {
    "ko": "2",
    "en": "2",
    "ja": "2"
  },
  "features": {
    "ko": [
      "사용자 질문 맥락에 따라 일상 대화·재무·헬스케어 전문가 역할을 자동 전환",
      "Qdrant 기반 RAG로 금융·헬스케어 문서를 검색해 답변을 보강",
      "Tavily Search 연동으로 필요한 경우 실시간 외부 정보를 조회",
      "Streamlit UI에서 로그인, 채팅방 생성, 대화 히스토리 관리 지원",
      "MongoDB와 Qdrant를 이용해 대화 이력 저장과 오래된 기록 백업 자동화"
    ],
    "en": [
      "Auto-switches roles (casual, finance, healthcare) based on user intent and context",
      "Augments answers with finance/health documents via Qdrant-backed RAG",
      "Fetches live external info via Tavily Search when needed",
      "Supports login, room creation, and history management in Streamlit UI",
      "Stores chats in MongoDB and auto-archives older summaries to Qdrant"
    ],
    "ja": [
      "ユーザーの文脈に応じて（日常／金融／ヘルスケア）専門ロールを自動切替",
      "QdrantベースのRAGで金融・医療文書を検索し回答を補強",
      "必要に応じてTavily Searchで外部の最新情報を取得",
      "Streamlit UIでログイン・ルーム作成・会話履歴管理をサポート",
      "MongoDBに履歴を保存し、古い要約をQdrantへ自動バックアップ"
    ]
  },
  "links": {
    "github": ""
  },
  "overviewStory": {
    "ko": "고객사 요구 챗봇 개발전 연습용 프로젝트입니다.",
    "en": "Practice project for customer-requested chatbot development.",
    "ja": "顧客要望のチャットボット開発前の練習プロジェクト。"
  },
  "detail_features": [
    {
      "title": {
        "ko": "LangGraph 기반 멀티 역할 오케스트레이션",
        "en": "LangGraph-based Multi-role Orchestration",
        "ja": "LangGraphベースのマルチロール・オーケストレーション"
      },
      "description": {
        "ko": "LangGraph StateGraph로 선택·검증·응답 노드를 구성해 사용자의 질문에 맞는 역할을 자동으로 선택",
        "en": "Builds select/validate/respond nodes in a LangGraph StateGraph to auto-select the right role per user query.",
        "ja": "LangGraphのStateGraphで選択・検証・応答ノードを構成し、質問に応じて最適ロールを自動選択。"
      },
      "implemented": true
    },
    {
      "title": {
        "ko": "RAG 지식 검색과 Tavily 통합",
        "en": "RAG Retrieval with Tavily Integration",
        "ja": "RAG知識検索とTavily統合"
      },
      "description": {
        "ko": "Qdrant와 Google 임베딩을 사용해 관련 문서를 검색하고, 필요 시 Tavily Search로 실시간 정보를 보강",
        "en": "Uses Qdrant with Google embeddings to retrieve documents and augments with live info via Tavily Search when needed.",
        "ja": "QdrantとGoogle埋め込みで関連文書を検索し、必要に応じてTavily Searchで最新情報を補強。"
      },
      "implemented": true
    },
    {
      "title": {
        "ko": "LangSmith 품질 점검 루프",
        "en": "LangSmith Quality Check Loop",
        "ja": "LangSmith品質チェックループ"
      },
      "description": {
        "ko": "LangSmith 프롬프트를 호출해 응답 품질과 안전성을 확인하고, 실패 시 재시도를 유도",
        "en": "Invokes LangSmith prompts to verify response quality and safety, triggering retries on failure.",
        "ja": "LangSmithのプロンプトで応答の品質・安全性を確認し、失敗時はリトライを誘発。"
      },
      "implemented": true
    },
    {
      "title": {
        "ko": "MongoDB 기반 사용자·채팅방 관리",
        "en": "MongoDB-based User & Room Management",
        "ja": "MongoDBによるユーザー／チャットルーム管理"
      },
      "description": {
        "ko": "로그인 후 채팅방 생성, 채팅 이력 저장, 방 단위 삭제 기능을 MongoDB 컬렉션으로 구성",
        "en": "Implements login, room creation, chat history storage, and room-level deletion via MongoDB collections.",
        "ja": "ログイン後のルーム作成、履歴保存、ルーム単位の削除をMongoDBコレクションで実装。"
      },
      "implemented": true
    },
    {
      "title": {
        "ko": "Qdrant 대화 백업 파이프라인",
        "en": "Qdrant Conversation Backup Pipeline",
        "ja": "Qdrant会話バックアップパイプライン"
      },
      "description": {
        "ko": "대화가 일정 쌍을 넘으면 Qdrant에 요약 조각을 백업하고 MongoDB 이력을 정리해 성능을 유지",
        "en": "When conversations exceed a threshold, backs up summary chunks to Qdrant and prunes MongoDB to maintain performance.",
        "ja": "会話が一定数を超えると要約チャンクをQdrantへバックアップし、MongoDB履歴を整理して性能を維持。"
      },
      "implemented": true
    }
  ],
  "preview_screenshots": {
    "screenshots": []
  },
  "stackAndArchitecture": {
    "techStack": {
      "frontend": "Streamlit, streamlit_chat",
      "backend": "Python, LangChain, LangGraph",
      "database": "MongoDB, Qdrant",
      "AI": "Google Gemini 1.5 Flash, GPT-4o mini Embeddings"
    }
  },
  "lessonsLearned": {
    "ko": "LangGraph로 여러 역할과 검증 단계를 연결할 때 상태 관리와 예외 처리를 명확히 해야 안정적으로 동작함을 체감",
    "en": "Connecting multiple roles and validation stages with LangGraph requires explicit state management and exception handling for stable operation.",
    "ja": "複数ロールと検証段階をLangGraphで接続するには、明確な状態管理と例外処理が安定動作の鍵であると実感。"
  },
  "results": {
    "achievements": {
      "ko": "역할 분기, RAG 검색, 품질 검증을 단일 워크플로우에 통합해 상담 응답 품질을 향상",
      "en": "Improved consultation quality by unifying role branching, RAG retrieval, and quality checks into a single workflow.",
      "ja": "ロール分岐・RAG検索・品質検証を単一ワークフローに統合し、相談応答の品質を向上。"
    },
    "nextSteps": {
      "ko": "LangGraph 노드 모니터링과 사용자 맞춤형 프롬프트 설정 기능을 추가 예정",
      "en": "Add node-level monitoring in LangGraph and user-specific prompt configuration.",
      "ja": "LangGraphのノード監視とユーザー別プロンプト設定機能を追加予定。"
    }
  },
  "additional_links": {
    "team github": "https://github.com/plaid-ai",
    "team website": "https://plaid.ai.kr"
  },
  "flag": "deactive"
}
