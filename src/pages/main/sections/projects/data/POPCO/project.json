{
  "name": {
    "ko": "팝코",
    "en": "POPCO",
    "ja": "ポップコ"
  },
  "summary": {
    "ko": "창의적 콘텐츠 제작을 위한 협업 플랫폼",
    "en": "Collaboration platform for creative content production",
    "ja": "創造的なコンテンツ制作のためのコラボレーションプラットフォーム"
  },
  "period": {
    "ko": "2024.05 - 2024.10",
    "en": "2024.05 - 2024.10",
    "ja": "2024.05 - 2024.10"
  },
  "role": {
    "ko": "Full-Cycle Solo Project",
    "en": "Full-Cycle Solo Project",
    "ja": "Full-Cycle Solo Project"
  },
  "tags": {
    "ko": ["Next.js", "Node.js", "PostgreSQL", "WebRTC"],
    "en": ["Next.js", "Node.js", "PostgreSQL", "WebRTC"],
    "ja": ["Next.js", "Node.js", "PostgreSQL", "WebRTC"]
  },
  "features": {
    "ko": [
      "실시간 협업 편집 도구",
      "다양한 미디어 형식 지원",
      "버전 관리 및 히스토리 추적",
      "팀 워크스페이스 관리"
    ],
    "en": [
      "Real-time collaborative editing tools",
      "Support for various media formats",
      "Version control and history tracking",
      "Team workspace management"
    ],
    "ja": [
      "リアルタイム協力編集ツール",
      "様々なメディア形式サポート",
      "バージョン管理と履歴追跡",
      "チームワークスペース管理"
    ]
  },
  "detail": {
    "subtitle": {
      "ko": "함께 만드는 창의적 이야기",
      "en": "Creative Stories Made Together",
      "ja": "一緒に作る創造的な物語"
    },
    "overview": {
      "purpose": {
        "ko": "창작자들이 효율적으로 협업하여 고품질 콘텐츠를 제작할 수 있는 통합 플랫폼",
        "en": "Integrated platform where creators can efficiently collaborate to produce high-quality content",
        "ja": "クリエイターが効率的に協力して高品質コンテンツを制作できる統合プラットフォーム"
      },
      "target": {
        "ko": "콘텐츠 제작자, 크리에이터, 마케터",
        "en": "Content creators, creators, marketers",
        "ja": "コンテンツ制作者、クリエイター、マーケター"
      },
      "value": {
        "ko": "원활한 협업을 통한 창의적 아이디어 실현",
        "en": "Realizing creative ideas through smooth collaboration",
        "ja": "スムーズな協力を通じた創造的なアイデアの実現"
      }
    },
    "responsibilities": {
      "ko": [
        "Next.js 풀스택 웹 애플리케이션 개발",
        "PostgreSQL 데이터베이스 설계",
        "WebRTC 실시간 통신 구현",
        "파일 업로드 및 미디어 처리"
      ],
      "en": [
        "Next.js full-stack web application development",
        "PostgreSQL database design",
        "WebRTC real-time communication implementation",
        "File upload and media processing"
      ],
      "ja": [
        "Next.jsフルスタックウェブアプリケーション開発",
        "PostgreSQLデータベース設計",
        "WebRTCリアルタイム通信実装",
        "ファイルアップロードとメディア処理"
      ]
    },
    "highlights": {
      "ko": [
        "실시간 다중 사용자 편집 기능",
        "지능형 충돌 해결 시스템",
        "콘텐츠 제작 효율성 60% 향상"
      ],
      "en": [
        "Real-time multi-user editing functionality",
        "Intelligent conflict resolution system",
        "60% improvement in content production efficiency"
      ],
      "ja": [
        "リアルタイムマルチユーザー編集機能",
        "知能型競合解決システム",
        "コンテンツ制作効率60%向上"
      ]
    },
    "challenge": {
      "problem": {
        "ko": "다중 사용자 동시 편집 시 발생하는 데이터 충돌과 동기화 문제",
        "en": "Data conflicts and synchronization issues during multi-user simultaneous editing",
        "ja": "マルチユーザー同時編集時のデータ競合と同期問題"
      },
      "solution": {
        "ko": "Operational Transform 알고리즘과 실시간 동기화 시스템 구현",
        "en": "Implementation of Operational Transform algorithms and real-time synchronization systems",
        "ja": "Operational Transformアルゴリズムとリアルタイム同期システムの実装"
      },
      "result": {
        "ko": "사용자 만족도 4.6/5.0, 협업 효율성 60% 향상",
        "en": "Achieved user satisfaction 4.6/5.0, 60% improvement in collaboration efficiency",
        "ja": "ユーザー満足度4.6/5.0、協力効率60%向上"
      }
    },
    "metrics": {
      "ko": [
        "월 활성 사용자 12,000명",
        "평균 프로젝트 완성률 88%",
        "협업 효율성 60% 향상"
      ],
      "en": [
        "12,000 monthly active users",
        "Average project completion rate 88%",
        "60% improvement in collaboration efficiency"
      ],
      "ja": [
        "月間アクティブユーザー12,000人",
        "平均プロジェクト完成率88%",
        "協力効率60%向上"
      ]
    }
  },
  "id": "popco",
  "title": {
    "ko": "팝코 (POPCO)",
    "en": "POPCO",
    "ja": "ポップコ"
  },
  "subtitle": {
    "ko": "Next.js 기반 실시간 협업 콘텐츠 제작 플랫폼 — Operational Transform을 활용한 다중 사용자 동시 편집 및 WebRTC 통신",
    "en": "Next.js-based Real-time Collaborative Content Production Platform — Multi-user simultaneous editing and WebRTC communication using Operational Transform",
    "ja": "Next.jsベースのリアルタイム協力コンテンツ制作プラットフォーム — Operational Transformを活用したマルチユーザー同時編集とWebRTC通信"
  },
  "links": {
    "demo": "https://popco.app",
    "github": "https://github.com/YourUsername/POPCO-Platform"
  },
  "service": {
    "problem": {
      "ko": "기존 도구들의 협업 기능 부족 및 실시간 동기화 문제로 인한 창작 과정의 비효율성.",
      "en": "Inefficiency in the creative process due to lack of collaboration features in existing tools and real-time synchronization issues.",
      "ja": "既存ツールの協力機能不足とリアルタイム同期問題による制作プロセスの非効率性。"
    },
    "target": {
      "ko": "영상, 문서, 디자인 등 다양한 콘텐츠를 팀 단위로 빠르고 정확하게 제작하려는 크리에이티브 팀.",
      "en": "Creative teams aiming to produce various content such as video, documents, and design quickly and accurately as a team.",
      "ja": "動画、ドキュメント、デザインなど、様々なコンテンツをチーム単位で迅速かつ正確に制作したいクリエイティブチーム。"
    },
    "value": {
      "ko": "OT 알고리즘 기반의 충돌 없는 실시간 동시 편집, 통합된 미디어 관리 및 팀 워크플로우.",
      "en": "Conflict-free real-time simultaneous editing based on the OT algorithm, integrated media management, and team workflow.",
      "ja": "OTアルゴリズムに基づく競合のないリアルタイム同時編集、統合されたメディア管理とチームワークフロー。"
    }
  },
  "detail_features": [
    {
      "title": {
        "ko": "실시간 협업 편집 도구 (OT 기반)",
        "en": "Real-time Collaborative Editor (OT-based)",
        "ja": "リアルタイム協力編集ツール (OTベース)"
      },
      "description": {
        "ko": "Operational Transform (OT) 알고리즘을 적용하여 텍스트 및 미디어 요소의 다중 사용자 동시 편집을 충돌 없이 지원.",
        "en": "Supports conflict-free multi-user simultaneous editing of text and media elements by applying the Operational Transform (OT) algorithm.",
        "ja": "Operational Transform (OT)アルゴリズムを適用し、テキストおよびメディア要素のマルチユーザー同時編集を競合なしでサポート。"
      },
      "implemented": true
    },
    {
      "title": {
        "ko": "WebRTC 기반 실시간 통신",
        "en": "WebRTC-based Real-time Communication",
        "ja": "WebRTCベースのリアルタイム通信"
      },
      "description": {
        "ko": "WebRTC를 활용하여 협업 워크스페이스 내에서 음성 및 화상 채팅 기능을 제공.",
        "en": "Provides voice and video chat functionality within the collaboration workspace using WebRTC.",
        "ja": "WebRTCを活用し、協力ワークスペース内で音声およびビデオチャット機能を提供。"
      },
      "implemented": true
    },
    {
      "title": {
        "ko": "버전 관리 및 히스토리 추적",
        "en": "Version Control and History Tracking",
        "ja": "バージョン管理と履歴追跡"
      },
      "description": {
        "ko": "모든 편집 이력을 저장하고, 특정 시점으로 롤백할 수 있는 기능을 제공하여 안전한 협업 환경 구축.",
        "en": "Stores all editing history and provides the ability to roll back to a specific point in time, creating a secure collaboration environment.",
        "ja": "すべての編集履歴を保存し、特定の時点にロールバックできる機能を提供し、安全な協力環境を構築。"
      },
      "implemented": true
    },
    {
      "title": {
        "ko": "통합 미디어 자산 관리",
        "en": "Integrated Media Asset Management",
        "ja": "統合メディア資産管理"
      },
      "description": {
        "ko": "다양한 형식의 미디어 파일(이미지, 비디오, 오디오)을 업로드, 변환, 관리하는 통합 시스템.",
        "en": "An integrated system for uploading, converting, and managing various media file formats (images, video, audio).",
        "ja": "様々な形式のメディアファイル（画像、ビデオ、オーディオ）をアップロード、変換、管理する統合システム。"
      },
      "implemented": true
    }
  ],
  "more_Detail_features": {
    "ot_implementation": {
      "ko": "텍스트 및 미디어 요소의 동시 편집을 위한 Operational Transform (OT) 라이브러리 커스터마이징 및 Node.js 서버에 적용.",
      "en": "Customization of the Operational Transform (OT) library for simultaneous editing of text and media elements and application on the Node.js server.",
      "ja": "テキストおよびメディア要素の同時編集のためのOperational Transform (OT)ライブラリのカスタマイズとNode.jsサーバーへの適用。"
    },
    "webrtc_signaling": {
      "ko": "Node.js/Socket.io를 활용한 WebRTC 시그널링 서버 구축 및 P2P 연결 관리 로직 구현.",
      "en": "Built a WebRTC signaling server using Node.js/Socket.io and implemented P2P connection management logic.",
      "ja": "Node.js/Socket.ioを活用したWebRTCシグナリングサーバーの構築とP2P接続管理ロジックの実装。"
    },
    "media_processing": {
      "ko": "FFmpeg을 활용하여 서버 측에서 업로드된 미디어 파일의 형식 변환 및 최적화 파이프라인 구축 (Node.js Worker Threads 사용).",
      "en": "Built a server-side media file format conversion and optimization pipeline using FFmpeg (utilizing Node.js Worker Threads).",
      "ja": "FFmpegを活用し、サーバー側でアップロードされたメディアファイルの形式変換および最適化パイプラインを構築（Node.js Worker Threadsを使用）。"
    }
  },
  "preview_screenshots": {
    "screenshots": [
      "assets/popco/shot-01-editor.png",
      "assets/popco/shot-02-workspace.png",
      "assets/popco/shot-03-history.png"
    ],
    "description": {
      "ko": "협업 편집기 및 워크스페이스 대시보드 프리뷰",
      "en": "Collaborative Editor and Workspace Dashboard Preview",
      "ja": "協力編集者とワークスペースダッシュボードのプレビュー"
    }
  },
  "architecture": {
    "components": "Next.js (React) · Node.js (Express/Socket.io) · PostgreSQL · Cloud Storage (S3/Cloudinary) · WebRTC",
    "dataFlow": {
      "ko": "클라이언트 편집 액션 → Socket.io (OT) → Node.js 서버 (OT 적용/PostgreSQL 저장) → 다른 클라이언트 동기화.",
      "en": "Client Edit Action → Socket.io (OT) → Node.js Server (OT Application/PostgreSQL Storage) → Synchronization to Other Clients.",
      "ja": "クライアント編集アクション → Socket.io (OT) → Node.jsサーバー (OT適用/PostgreSQL保存) → 他のクライアントへの同期。"
    },
    "deployment": "Vercel (Next.js Frontend) · AWS EC2/DigitalOcean (Node.js Backend/DB)",
    "security": {
      "ko": "JWT 기반 사용자 인증, PostgreSQL Row-Level Security 적용, WebRTC 통신 암호화 (DTLS/SRTP).",
      "en": "JWT-based user authentication, PostgreSQL Row-Level Security applied, WebRTC communication encryption (DTLS/SRTP).",
      "ja": "JWTベースのユーザー認証、PostgreSQL Row-Level Security適用、WebRTC通信暗号化 (DTLS/SRTP)。"
    },
    "network": {
      "ko": "WebSocket (Socket.io)을 통한 실시간 데이터 동기화, WebRTC를 통한 P2P 미디어 스트리밍.",
      "en": "Real-time data synchronization via WebSocket (Socket.io), P2P media streaming via WebRTC.",
      "ja": "WebSocket (Socket.io)を介したリアルタイムデータ同期、WebRTCを介したP2Pメディアストリーミング。"
    }
  },
  "techStack": {
    "frontend": "Next.js, React, TypeScript, Tailwind CSS, Socket.io-client",
    "backend": "Node.js, Express, Socket.io, PostgreSQL, Sequelize/Prisma",
    "realtime": "Operational Transform (OT), WebRTC, Socket.io",
    "data": "PostgreSQL, Redis (Caching/Session)",
    "devops": "GitHub Actions, Docker, AWS/DigitalOcean"
  },
  "responsibilities": {
    "planning": {
      "ko": "OT 알고리즘 기반의 실시간 동기화 데이터 모델 설계, WebRTC 시그널링 프로토콜 정의.",
      "en": "Designed real-time synchronization data model based on the OT algorithm, defined WebRTC signaling protocol.",
      "ja": "OTアルゴリズムに基づくリアルタイム同期データモデルの設計、WebRTCシグナリングプロトコルの定義。"
    },
    "design": {
      "ko": "Next.js 풀스택 아키텍처 설계, PostgreSQL 스키마 설계, 반응형 협업 편집기 UI/UX 설계.",
      "en": "Designed Next.js full-stack architecture, PostgreSQL schema design, responsive collaborative editor UI/UX design.",
      "ja": "Next.jsフルスタックアーキテクチャの設計、PostgreSQLスキーマ設計、レスポンシブ協力編集者UI/UXの設計。"
    },
    "implementation": {
      "ko": "OT 로직이 적용된 Node.js 서버 구현, WebRTC P2P 연결 및 미디어 스트리밍 기능 개발, Next.js 프론트엔드 개발.",
      "en": "Implemented Node.js server with OT logic, developed WebRTC P2P connection and media streaming features, developed Next.js frontend.",
      "ja": "OTロジックが適用されたNode.jsサーバーの実装、WebRTC P2P接続およびメディアストリーミング機能の開発、Next.jsフロントエンドの開発。"
    },
    "operations": {
      "ko": "Docker를 활용한 배포 환경 구축, CI/CD 파이프라인 관리, 실시간 서버 모니터링 및 성능 최적화.",
      "en": "Built deployment environment using Docker, managed CI/CD pipeline, real-time server monitoring and performance optimization.",
      "ja": "Dockerを活用したデプロイ環境の構築、CI/CDパイプラインの管理、リアルタイムサーバー監視とパフォーマンス最適化。"
    },
    "collaboration": {
      "ko": "없음 (Solo Project), 초기 사용자 피드백을 통한 기능 개선 반복.",
      "en": "None (Solo Project), iterative feature improvement through initial user feedback.",
      "ja": "なし（ソロプロジェクト）、初期ユーザーフィードバックを通じた機能改善の反復。"
    }
  },
  "deployment": {
    "environment": "Development → Staging → Production (Vercel/AWS)",
    "pipeline": {
      "ko": "GitHub Actions → Docker Build → AWS EC2/Vercel 자동 배포",
      "en": "GitHub Actions → Docker Build → AWS EC2/Vercel Automatic Deployment",
      "ja": "GitHub Actions → Docker Build → AWS EC2/Vercel自動デプロイ"
    },
    "signing": "N/A (Web Service)",
    "secrets": {
      "ko": "환경 변수 및 AWS Secret Manager를 통한 DB/API 키 관리.",
      "en": "Managed DB/API keys via environment variables and AWS Secret Manager.",
      "ja": "環境変数およびAWS Secret Managerを介したDB/APIキーの管理。"
    }
  },
  "results": {
    "achievements": {
      "ko": "OT 알고리즘을 성공적으로 구현하여 60%의 협업 효율성 향상 달성. WebRTC를 통한 안정적인 실시간 통신 환경 제공.",
      "en": "Successfully implemented the OT algorithm, achieving a 60% improvement in collaboration efficiency. Provided a stable real-time communication environment via WebRTC.",
      "ja": "OTアルゴリズムの実装に成功し、協力効率60%向上を達成。WebRTCを介した安定したリアルタイム通信環境を提供。"
    },
    "learnings": {
      "ko": "Operational Transform과 같은 복잡한 분산 시스템의 동기화 로직을 설계하고 디버깅하는 심층적인 경험 확보. Next.js의 서버리스 기능과 Node.js 서버의 통합 방법 학습.",
      "en": "Gained in-depth experience in designing and debugging synchronization logic for complex distributed systems like Operational Transform. Learned how to integrate Next.js serverless functions with a dedicated Node.js server.",
      "ja": "Operational Transformのような複雑な分散システムの同期ロジックを設計およびデバッグする深い経験を獲得。Next.jsのサーバーレス機能と専用Node.jsサーバーの統合方法を学習。"
    },
    "nextSteps": {
      "ko": "CRDT (Conflict-free Replicated Data Type)로의 동기화 알고리즘 전환 검토, AI 기반 콘텐츠 자동 생성 기능 추가.",
      "en": "Reviewing synchronization algorithm transition to CRDT (Conflict-free Replicated Data Type), adding AI-based content auto-generation features.",
      "ja": "CRDT (Conflict-free Replicated Data Type)への同期アルゴリズム移行の検討、AIベースのコンテンツ自動生成機能の追加。"
    }
  },
  "additional_links": {
    "website": "https://popco.com",
    "blog": "https://blog.popco.com/ot-webrtc-collaboration"
  }
}